# _*_ coding: UTF-8 _*_
# Version information START --------------------------------------------------
VERSION_INFO = \
    """
    Author: ZHANG YUBO

    Version-01:
        2020-01  Converting VCF format to multiple sequence alignment
    """
# Version information END ----------------------------------------------------

import argparse
import gzip
import os
import random
import re
import sys
import time


###############################################################################
# function part
###############################################################################
class FastaIndex(object):
    # index reference fasta
    def __init__(self, index_line_list):
        self.NAME = index_line_list[0]
        self.LENGTH = int(index_line_list[1])
        self.OFFSET = int(index_line_list[2])
        self.LINEBASES = int(index_line_list[3])
        self.LINEWIDTH = int(index_line_list[4])


def UpSampling(indv_list, format):
    if format == 'haplo':
        if len(indv_list) >= 8:
            return (indv_list[:8])
        else:
            indv_list = indv_list * (8 // len(indv_list))
            for i in range(len(indv_list), 8):
                indv_list.append(indv_list[random.randint(0, len(indv_list) - 1)])
            return (indv_list)
    elif format == 'diplo':
        if len(indv_list) >= 4:
            return (indv_list[:4])
        else:
            indv_list = indv_list * (4 // len(indv_list))
            for i in range(len(indv_list), 4):
                indv_list.append(indv_list[random.randint(0, len(indv_list) - 1)])
            return (indv_list)


###############################################################################
# read parameters
###############################################################################
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="format conversion")
    parser.add_argument("-i", "--Input",
                        help="Input VCF file", required=True)
    parser.add_argument("-o", "--Output",
                        help="Output file", required=False)
    parser.add_argument("-r", "--Reference", required=True,
                        help="Input reference fasta file. Index file generated by samtools in the same directory is also required")
    parser.add_argument("-P1", "--pop1",
                        help="Sample names (separated by commas)", required=True)
    parser.add_argument("-P2", "--pop2",
                        help="Sample names (separated by commas)", required=True)
    parser.add_argument("-P3", "--pop3",
                        help="Sample names (separated by commas)", required=True)
    parser.add_argument("-P4", "--pop4",
                        help="Sample names (separated by commas)", required=True)
    parser.add_argument("-P5", "--pop5",
                        help="Sample names (separated by commas), optional. Only used in five-taxon model", required=False)
    parser.add_argument("--exclude", help="Name of scaffolds to exclude (separated by commas), optional", required=False)
    parser.add_argument("--include", help="Name of scaffolds to include (separated by commas), optional", required=False)
    parser.add_argument("-f", "--format",
                        help="Format to output. One allele of diploid genotypes will be randomly retained if the parameter is haplo",
                        choices=("haplo", "diplo"), required=True)


    # -------------------------------------------------------------------->>>>>
    # load the parameters
    # -------------------------------------------------------------------->>>>>
    ARGS = parser.parse_args()
    ReferenceFasta = open(ARGS.Reference, 'r')
    include_chr = []
    exclude_chr = []
    if ARGS.include:
        include_chr = ARGS.include.split(',')
    if ARGS.exclude:
        exclude_chr = ARGS.exclude.split(',')


    # -------------------------------------------------------------------->>>>>
    # Build index for reference fasta
    # -------------------------------------------------------------------->>>>>
    if os.path.exists("%s.fai" % ARGS.Reference):
        ReferenceIndexList = []
        with open("%s.fai" % ARGS.Reference, 'r') as ReferenceIndex:
            lines = ReferenceIndex.readlines()
            for line in lines:
                line = line.split()
                if include_chr == [] and exclude_chr == []:
                    ReferenceIndexList.append(FastaIndex(line))
                elif include_chr != []:
                    if line[0] in include_chr:
                        ReferenceIndexList.append(FastaIndex(line))
                elif exclude_chr != []:
                    if line[0] not in exclude_chr:
                        ReferenceIndexList.append(FastaIndex(line))
    else:
        print("There is no index file for reference fasta. Program exit.")
        sys.exit()


    # -------------------------------------------------------------------->>>>>
    # Open input vcf file
    # -------------------------------------------------------------------->>>>>
    if ARGS.Input.endswith(".gz"):
        InputVcf = gzip.open(ARGS.Input, "rt")
    else:
        InputVcf = open(ARGS.Input, "r")


    while True:
        line = InputVcf.readline()
        if not line:
            break
        if line[0:6] == '#CHROM':
            IndvOrder = line.split()
            break


    IndvList = []
    format = ARGS.format
    if ARGS.pop5:
        print("Five populations will be analysed.")
        for pop in [ARGS.pop1, ARGS.pop2, ARGS.pop3, ARGS.pop4, ARGS.pop5]:
            pop = pop.split(",")
            IndvList += (UpSampling(pop, format))
        for i in range(5):
            if format == 'haplo':
                for j in range(8):
                    print("pop%s\t%s" % (i + 1, IndvList[i * 8 + j]))
            elif format == 'diplo':
                for j in range(4):
                    print("pop%s\t%s" % (i + 1, IndvList[i * 4 + j]))
    else:
        print("Four populations will be analysed.")
        for pop in [ARGS.pop1, ARGS.pop2, ARGS.pop3, ARGS.pop4]:
            pop = pop.split(",")
            IndvList += (UpSampling(pop, format))
        for i in range(4):
            if format == 'haplo':
                for j in range(8):
                    print("pop%s\t%s" % (i + 1, IndvList[i * 8 + j]))
            elif format == 'diplo':
                for j in range(4):
                    print("pop%s\t%s" % (i + 1, IndvList[i * 4 + j]))


    IndvIndexList = []
    for indv in IndvList:
        try:
            IndvIndexList.append(IndvOrder.index(indv))
        except ValueError:
            print("There is no individual '%s' in vcf file. Program exit." % indv)
            sys.exit()


    for chr in ReferenceIndexList:
        print('%s\tChromosome %s will be analysed.'%((time.asctime(time.localtime(time.time()))), chr.NAME))
        FileOut = open('%s_%s.txt' % (ARGS.Output, chr.NAME), 'w')
        ReferenceFasta.seek(chr.OFFSET, 0)
        ref_seq = ReferenceFasta.read(chr.LENGTH // chr.LINEBASES * chr.LINEWIDTH + chr.LENGTH % chr.LINEBASES)
        ref_seq = ref_seq.replace('\n', '')
        #print(len(ref_seq))
        flag = False
        snp_dict = {}
        #InputVcf.seek(0, 0)
        while True:
            line = InputVcf.readline()
            if not line:
                break
            if line[0] != '#':
                line = line.split('\t')
                if line[0] == chr.NAME:
                    flag = True
                    gtdict = {}
                    # gtdict = {'0': 'N', '1': 'N', '2': 'N', '3': 'N'}
                    gtdict['0'] = line[3]
                    line[4] = line[4].split(',')
                    for j in range(len(line[4])):
                        gtdict[str(j + 1)] = line[4][j]
                    temp_list = []
                    if format == 'haplo':
                        for i in IndvIndexList:
                            GT = line[i].split(':')[0]
                            GT = re.split('[|/]', GT)
                            # if len(GT) == 2:
                            j = random.randint(0, 1)
                            if GT[j] == '.':
                                temp_list.append('N')
                            else:
                                temp_list.append(gtdict[GT[j]])
                    elif format == 'diplo':
                        for i in IndvIndexList:
                            GT = line[i].split(':')[0]
                            GT = re.split('[|/]', GT)
                            # if len(GT) == 2:
                            for j in range(0, 2):
                                if GT[j] == '.':
                                    temp_list.append('N')
                                else:
                                    temp_list.append(gtdict[GT[j]])
                    snp_dict[int(line[1])] = temp_list
                elif flag == True and line[0] != chr.NAME:
                    break
        if flag == False:
            print("There is no chromosome %s in vcf file. Program exit." % chr.NAME)
            sys.exit()

            
        #print(time.asctime(time.localtime(time.time())))
        if format == 'haplo':
            for i in range(len(IndvIndexList)):
                temp_seq = list(ref_seq)
                for snp in snp_dict:
                    temp_seq[snp - 1] = snp_dict[snp][i]
                FileOut.write(''.join(temp_seq) + '\n')
        elif format == 'diplo':
            for i in range(2*len(IndvIndexList)):
                temp_seq = list(ref_seq)
                for snp in snp_dict:
                    temp_seq[snp - 1] = snp_dict[snp][i]
                FileOut.write(''.join(temp_seq) + '\n')
        print('%s\tChromosome %s done.'%((time.asctime(time.localtime(time.time()))), chr.NAME))

