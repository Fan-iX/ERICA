# _*_ coding: UTF-8 _*_

# Version information START --------------------------------------------------
VERSION_INFO = \
    """
    Author: ZHANG YUBO

    Version-01:
        2019-01-27 convert sequence (phylip format) generated by seqgen to geno

    Version-02:
        2019-11-04 convert sequence (phylip format) to geno, with fixed dimensions

    """
# Version information END ----------------------------------------------------

import argparse
import random


def ConvertSeqToGeno(InputFile, FileOut, NumOfTaxon, NumPerTaxonIn, NumPerTaxonOut, Position):
    with open(InputFile, 'r') as FileIn:
        lines = FileIn.readlines()
    # remove head of phylip file
    lines = lines[1:]
    for i in range(0, len(lines)):
        lines[i] = lines[i].split()
    lines.sort(key=lambda x: int(x[0]))

    # the order to output
    OutputOrderList = []
    for i in range(NumOfTaxon):
        for j in range(NumPerTaxonOut // NumPerTaxonIn):
            for k in range(NumPerTaxonIn):
                OutputOrderList.append(i * NumPerTaxonIn + k + 1)
        if NumPerTaxonOut % NumPerTaxonIn != 0:
            for j in range(NumPerTaxonOut % NumPerTaxonIn):
                OutputOrderList.append(i * NumPerTaxonIn + random.randint(1, NumPerTaxonIn))
    # print(OutputOrderList)

    # if position = 1, output head for geno file
    if Position == 1:
        FileOut.write("#CHOM\tPOS\t")
        for i in range(0, len(OutputOrderList)):
            FileOut.write(str(i + 1) + "\t")
        FileOut.write("\n")

    # geno part
    for i in range(0, len(lines[0][1])):
        FileOut.write("chr1\t")
        FileOut.write(str(i + Position) + "\t")
        for j in range(0, len(OutputOrderList)):
            FileOut.write(lines[OutputOrderList[j] - 1][1][i] + "\t")
        FileOut.write("\n")


###############################################################################
# read parameters
###############################################################################
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="convert sequence to geno")
    parser.add_argument("-i", "--Input",
                        help="Path to input directory", required=True)
    parser.add_argument("-o", "--Output",
                        help="Output geno file", required=True)
    parser.add_argument("-p", "--Position",
                        help="Start position", default="1")
    parser.add_argument("-n", "--NumOfTaxon",
                        help="Number of taxon", default="4")
    parser.add_argument("-nin", "--NumPerTaxonIn",
                        help="Number of samples per taxon of input phylip file", default="8")
    parser.add_argument("-nout", "--NumPerTaxonOut",
                        help="Number of samples per taxon of output geno file", default="8")
    parser.add_argument("--NameFile",
                        help="Path to the file recording file names to be analysed", default="file_name")
    parser.add_argument("-w", "--WindowSize",
                        help="Sequence length for each phylip file", default="5000")
    # -------------------------------------------------------------------->>>>>
    # load the paramters
    # -------------------------------------------------------------------->>>>>
    ARGS = parser.parse_args()
    InputDir = ARGS.Input
    OutputFile = ARGS.Output
    Position = int(ARGS.Position)
    NumOfTaxon = int(ARGS.NumOfTaxon)
    NumPerTaxonIn = int(ARGS.NumPerTaxonIn)
    NumPerTaxonOut = int(ARGS.NumPerTaxonOut)
    NameFile = ARGS.NameFile
    WindowSize = int(ARGS.WindowSize)
    
    with open(InputDir + '/' + NameFile, 'r') as NameFileInput:
        FileNames = NameFileInput.readlines()

    for i in range(len(FileNames)):
        FileNames[i] = FileNames[i].strip()

    with open(OutputFile, 'w') as FileOut:
        for FileName in FileNames:
            ConvertSeqToGeno((InputDir + '/' + FileName), FileOut, NumOfTaxon, NumPerTaxonIn, NumPerTaxonOut,
                             (FileNames.index(FileName) * WindowSize + Position))

# 2019-11-04