# _*_ coding: UTF-8 _*_

# Version information START --------------------------------------------------
VERSION_INFO = \
    """
    Author: ZHANG YUBO

    Version-01:
        2019-10  Topology weighting for genealogies generated by ms using twisst

    Version-02:
        2019-11-04 Topology weighting for genealogies generated by ms using twisst, with variable number of haplotypes, taxa and cores

    """
# Version information END ----------------------------------------------------

import argparse
import os

FourTaxonDict = {
                '2134':'1\t3\t2',
                '1324':'2\t1\t3',
                '3214':'3\t2\t1'}

FiveTaxonDict = {
                '12345':'1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\t15',
                '13245':'2\t1\t3\t4\t6\t5\t10\t11\t12\t7\t8\t9\t14\t13\t15',
                '23145':'2\t3\t1\t10\t11\t12\t4\t6\t5\t7\t9\t8\t14\t15\t13',
                '23415':'11\t12\t10\t1\t2\t3\t5\t6\t4\t8\t9\t7\t15\t14\t13',
                '24315':'8\t9\t7\t2\t1\t3\t6\t5\t4\t11\t12\t10\t15\t13\t14',
                '34215':'9\t8\t7\t2\t3\t1\t11\t12\t10\t6\t5\t4\t13\t15\t14',
                '13425':'11\t10\t12\t5\t6\t4\t1\t2\t3\t8\t7\t9\t15\t13\t14',
                '14325':'8\t7\t9\t6\t5\t4\t2\t1\t3\t11\t10\t12\t15\t14\t13',
                '34125':'9\t7\t8\t11\t12\t10\t2\t3\t1\t6\t4\t5\t13\t14\t15',
                '12435':'10\t11\t12\t5\t4\t6\t8\t7\t9\t1\t2\t3\t13\t15\t14',
                '14235':'7\t8\t9\t6\t4\t5\t11\t10\t12\t2\t1\t3\t14\t15\t13',
                '24135':'7\t9\t8\t11\t10\t12\t6\t4\t5\t2\t3\t1\t14\t13\t15'}


###############################################################################
# read parameters
###############################################################################
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Topology weighting for genealogies generated by ms using twisst")
    parser.add_argument("-i", "--Input",
                        help="Path to input directory")
    parser.add_argument("-o", "--Output",
                        help="Output file name", default="tree_weights.tsv")
    parser.add_argument("--Order",
                        help="Change topology order, corresponding to the sequence order change")
    parser.add_argument("--NumOfTaxon",
                        help="Number of taxon", default="4")
    parser.add_argument("--NumPerTaxon",
                        help="Number of samples per taxon", default="8")
    parser.add_argument("--NameFile",
                        help="Path to the file recording file names to be analysed", default="tree_file_name")
    parser.add_argument("--PathToTwisst",
                        help="Path to Twisst", default= "/home/zhangyubo/Simulation/twisst-master/run_twisst_parallel.py")
    parser.add_argument("-T","--Threads",
                        help="Number of worker threads", default="4")

    # -------------------------------------------------------------------->>>>>
    # load the paramters
    # -------------------------------------------------------------------->>>>>
    ARGS = parser.parse_args()
    InputDir = ARGS.Input
    Output = ARGS.Output
    Order = ARGS.Order
    NumOfTaxon = int(ARGS.NumOfTaxon)
    NumPerTaxon = int(ARGS.NumPerTaxon)
    NameFile = ARGS.NameFile
    PATHTOTWISST = ARGS.PathToTwisst
    Threads = int(ARGS.Threads)

    if Order:
        if NumOfTaxon == 4:
            TopoOrder = FourTaxonDict[Order].split()
            for i in range(len(TopoOrder)):
                TopoOrder[i] = int(TopoOrder[i]) - 1

        elif NumOfTaxon ==5:
            TopoOrder = FiveTaxonDict[Order].split()
            for i in range(len(TopoOrder)):
                TopoOrder[i] = int(TopoOrder[i]) - 1

    # command line format
    Pop_com = ''
    for i in range(NumOfTaxon):
        Pop_com += '-g ' + chr(65 + i) + ' '
        for j in range(NumPerTaxon):
            Pop_com += str(i * NumPerTaxon + j + 1) + ','
        Pop_com = Pop_com[:-1] + ' '

    #read genealogy file names
    with open(InputDir+'/'+NameFile,'r') as NameFileInput:
        FileNames = NameFileInput.readlines()

    with open(Output, 'w') as FileOutput:
        for FileName in FileNames:
            FileName = FileName.strip()
            print("python2 %s -t %s -w temp.tsv %s --method complete -T %s" % (
            PATHTOTWISST, (InputDir+'/'+FileName), Pop_com, Threads))
            os.system("python2 %s -t %s -w temp.tsv %s --method complete -T %s" % (
            PATHTOTWISST, (InputDir+'/'+FileName), Pop_com, Threads))

            with open ('temp.tsv', 'r') as TempWeightsIn:
                WeightsLines = TempWeightsIn.readlines()
                if NumOfTaxon == 4:
                    SumList = [0] * 3
                    for i in range(4, len(WeightsLines)):
                        WeightsLines[i] = WeightsLines[i].split()
                        for j in range(3):
                            SumList[j] += int(WeightsLines[i][j])
                    sum = 0.0
                    for j in range(3):
                        sum += SumList[j]
                    if Order:
                        for j in TopoOrder:
                            FileOutput.write(str(SumList[j] / sum) + '\t')
                    else:
                        for j in range(3):
                            FileOutput.write(str(SumList[j] / sum) + '\t')
                    FileOutput.write('\n')

                elif NumOfTaxon == 5:
                    SumList = [0] * 15
                    for i in range(16, len(WeightsLines)):
                        WeightsLines[i] = WeightsLines[i].split()
                        for j in range(15):
                            SumList[j] += int(WeightsLines[i][j])
                    sum = 0.0
                    for j in range(15):
                        sum += SumList[j]
                    
                    #order of topology is different in twisst and Erica
                    NewSumList = []
                    for j in [0, 3, 12, 11, 10, 9, 4, 7, 14, 1, 6, 13, 2, 5, 8]:
                        NewSumList.append(SumList[j])
                        
                    if Order:
                        for j in TopoOrder:
                            FileOutput.write(str(NewSumList[j] / sum) + '\t')
                    else:
                        for j in range(15):
                            FileOutput.write(str(NewSumList[j] / sum) + '\t')
                    FileOutput.write('\n')

# 2019-11-04